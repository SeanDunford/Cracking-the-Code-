#include <iostream>
#include <cstdlib> 
#include <vector>


template <class dataTypeClass> class hashItem{
private:
dataTypeClass* mNextHashItem; 
std::string key = "invalidKey"; 
public:
hashItem():mNextHashItem(0){}
hashItem(dataTypeClass aHashItem){}
~hashItem(){}

void setNextHashItem(const dataTypeClass* aHashItem){ mNextHashItem = aHashItem; }
void setNextHashItem(const dataTypeClass &aHashItem){ mNextHashItem = &aHashItem;}

}; 

template <class dataTypeClass> class hash{
private:
std::vector <dataTypeClass> hashVector; 
std::string mName; 
public:
hash(){}
hash(std::string aName = "unnamedHash"):mName(aName){}
~hash(){std::cout<<"Hash "<<mName<<"destructing!";}
void addHashItem(dataTypeClass hashItem, int key){} 
int hashFunction(dataTypeClass hashItem){return 0;} 
}; 
